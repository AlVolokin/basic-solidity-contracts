pragma solidity ^0.4.19;

contract ServiceMarket {
    
    address owner;
    uint sericeCost = 1 ether;
    uint lastDeal;
    uint ownerWithdraw;
    
    event Deal(address indexed buyer, uint moment);
    event Withdraw(address owner, uint amount, uint moment);
    
    function ServiceMarket() public {
        owner = msg.sender;
    }
    
    modifier cooldown() {
        require(now - lastDeal >= 2 minutes);
        _;
    }
    
    modifier ownerCooldown() {
        require(now - ownerWithdraw >= 1 hours);
        _;
    }
    
    modifier enoughEther() {
        require(msg.value >= 1 ether);
        _;
    }
    
    modifier onlyOwner() {
        require(owner == msg.sender);
        _;
    }
    
    modifier enoughBalance(uint amount) {
        require(amount <= this.balance);
        _;
    }
    
    modifier maxWithdraw(uint amount) {
        require(amount <= 5 ether);
        _;
    }
    
    function() public payable {
        
    }
    
    function buyService() cooldown enoughEther public payable {
        Deal(msg.sender, now);
        lastDeal = now;
        if(msg.value > 1 ether) {
            msg.sender.transfer(msg.value - 1 ether);
        }
    }
    
    function withdraw(uint amount) onlyOwner ownerCooldown enoughBalance(amount) maxWithdraw(amount) public {
        owner.transfer(amount);
        Withdraw(owner, amount, now);
        ownerWithdraw = now;
    }
    
    function getBalance() public view returns (uint) {
        return this.balance;
    }
    
}
